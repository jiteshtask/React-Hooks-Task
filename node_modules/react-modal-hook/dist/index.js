'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var ReactDOM = _interopDefault(require('react-dom'));

/**
 * Throw error when ModalContext is used outside of context provider
 */
var invariantViolation = function () {
    throw new Error("Attempted to call useModal outside of modal context. Make sure your app is rendered inside ModalProvider.");
};
/**
 * Modal Context Object
 */
var ModalContext = React__default.createContext({
    showModal: invariantViolation,
    hideModal: invariantViolation
});

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

/**
 * Modal Root
 *
 * Renders modals using react portal.
 */
var ModalRoot = React.memo(function (_a) {
    var modals = _a.modals, _b = _a.container, Container = _b === void 0 ? React__default.Fragment : _b;
    var _c = React.useState(undefined), mountNode = _c[0], setMountNode = _c[1];
    // This effect will not be ran in the server environment
    React.useEffect(function () { return setMountNode(document.body); });
    return mountNode ? ReactDOM.createPortal(React__default.createElement(Container, null, Object.keys(modals).map(function (key) {
        var Component = modals[key];
        return React__default.createElement(Component, { key: key });
    })), document.body) : null;
});

/**
 * Modal Provider
 *
 * Provides modal context and renders ModalRoot.
 */
var ModalProvider = function (_a) {
    var container = _a.container, children = _a.children;
    var _b = React.useState({}), modals = _b[0], setModals = _b[1];
    var showModal = React.useCallback(function (key, modal) {
        return setModals(function (modals) {
            var _a;
            return (__assign({}, modals, (_a = {}, _a[key] = modal, _a)));
        });
    }, []);
    var hideModal = React.useCallback(function (key) {
        return setModals(function (modals) {
            var newModals = __assign({}, modals);
            delete newModals[key];
            return newModals;
        });
    }, []);
    var contextValue = React.useMemo(function () { return ({ showModal: showModal, hideModal: hideModal }); }, []);
    return (React__default.createElement(ModalContext.Provider, { value: contextValue },
        React__default.createElement(React__default.Fragment, null,
            children,
            React__default.createElement(ModalRoot, { modals: modals, container: container }))));
};

/**
 * Utility function to generate unique number per component instance
 */
var generateModalKey = (function () {
    var count = 0;
    return function () { return "" + ++count; };
})();
/**
 * React hook for showing modal windows
 */
var useModal = function (component, inputs) {
    if (inputs === void 0) { inputs = []; }
    var key = React.useMemo(generateModalKey, []);
    var modal = React.useMemo(function () { return component; }, inputs);
    var context = React.useContext(ModalContext);
    var _a = React.useState(false), isShown = _a[0], setShown = _a[1];
    var showModal = React.useCallback(function () { return setShown(true); }, []);
    var hideModal = React.useCallback(function () { return setShown(false); }, []);
    React.useEffect(function () {
        if (isShown) {
            context.showModal(key, modal);
        }
        else {
            context.hideModal(key);
        }
        // Hide modal when parent component unmounts
        return function () { return context.hideModal(key); };
    }, [modal, isShown]);
    return [showModal, hideModal];
};

exports.ModalContext = ModalContext;
exports.ModalProvider = ModalProvider;
exports.ModalRoot = ModalRoot;
exports.useModal = useModal;
//# sourceMappingURL=index.js.map
